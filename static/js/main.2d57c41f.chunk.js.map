{"version":3,"sources":["reportWebVitals.js","index.js","App.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","App","document","getElementById","nums","ops","state","lastPressed","undefined","calc","operation","handleClick","e","innerText","target","setState","evaluated","eval","splitted","split","last","slice","includes","lastNumberIdx","reverse","findIndex","char","length","this","currentNumber","className","id","type","value","onClick","React","Component"],"mappings":"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","file":"static/js/main.2d57c41f.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n// import 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import \"./App.css\";\nimport React from \"react\";\nimport ReactFCCtest from \"react-fcctest\";\n\nconst nums = [7, 8, 9, 4, 5, 6, 1, 2, 3, 0];\nconst ops = [\"/\", \"*\", \"-\", \"+\"];\n\nclass App extends React.Component {\n  state = {\n    lastPressed: undefined,\n    calc: '0',\n    operation: undefined,\n  };\n\n/// so it's just and e eveent click fonction  with a lot of fuckin switch case and dum ifs\nhandleClick = (e) => {\n    const { innerText } = e.target;\n    const {lastPressed, calc } = this.state;\n    \n\n \n\n     switch (innerText) {\n      case \"AC\": {\n        this.setState({\n           calc: \"0\",\n        });\n        break;\n      }\n      case '=': {\n        // so most of the calculation work is in this eval() method\n        const evaluated = eval(calc);\n        this.setState({\n      \n          calc: evaluated\n        });\n        break;\n      }\n      /// I don't get shit of what the fuck he did with this regex but it works\n      case '.':{\n        const splitted = calc.split(/[\\+\\-\\*\\/]/);\n        const last = splitted.slice(-1)[0];\n        \n        if(!last.includes('.')) {\n          this.setState({\n            calc: calc+'.'\n          })\n        }\n\n         break;\n      }\n      default:{\n         let e = undefined;\n         //ops of the ops object at the start not the innertext operators\n         // manip de merde pour prendre les dernieres operations(ex: 5 * - 5 = -25), je pige quedalle rab 7yeti el kalba!\n         if(ops.includes(innerText)){\n          if(ops.includes(lastPressed) &&  innerText != '-'){\n            const lastNumberIdx = calc.split('').reverse()\n                .findIndex(char => char !== ' ' && nums.includes(+char)); \n            e = calc.slice(0, calc.length - lastNumberIdx) + ` ${innerText} `;\n         } else {\n           e = `${calc} ${innerText} `;\n         }\n        \n        } else{\n          e  = (calc === \"0\") ? innerText : (calc + innerText);\n        }\n          this.setState({\n            calc: e\n            \n          });\n        }\n      }\n    \n\n       \n    this.setState({\n      lastPressed: innerText\n    })\n   \n     // useles bs that the tuto guy tried, helped me to understand most of the logic of this\n    // if (!Number.isNaN(Number(innerText))) {\n    //   if (currentNumber === \"0\") {\n    //     this.setState({\n    //       currentNumber: innerText,\n          \n    //     });\n    //   } else {\n    //     this.setState({\n    //       currentNumber: currentNumber + innerText,\n          \n\n    //     });\n    //   }\n    //   return;\n    // }\n   \n\n    //   case \".\": {\n    //     if (!currentNumber.includes(\".\")) {\n    //       this.setState({\n    //         currentNumber: currentNumber + innerText,\n    //       });\n    //     }\n    //     break;\n    //   }\n\n    //   default: {\n    //     if (!operation) {\n    //       this.setState({\n    //         operation: innerText,\n    //         calc: currentNumber,\n    //         currentNumber: \"\",\n    //       });\n    //     }\n    //       else if(innerText === \"=\") {\n    //         const evalv = eval(`${calc} ${operation} ${currentNumber}`);\n    //         this.setState({\n    //           operation: undefined,\n    //           calc: evalv,\n    //           currentNumber: evalv\n    //         });\n    //       } \n    //       else {\n    //       this.setState({\n    //         operation: innerText\n    //       })\n    //       }\n    //     }\n    // }\n  };\n  render() {\n    const { currentNumber, calc } = this.state;\n    return (\n      <div className=\"box\">\n        <div>\n          <ReactFCCtest />\n        </div>\n        {/* <p style={{ position: \"absolute\", top: 0 }}>\n          {JSON.stringify(this.state, null, 2)}{\" \"}\n        </p> */}\n        <div className=\"calculatrice\">\n          <div className=\"calculator__sun-container\">\n            <div className=\"calculator__sun-battery\"></div>\n            <div>\n              <h2 className=\"brand\">\n                JS Super<span>90's</span>\n              </h2>\n            </div>\n          </div>\n\n          <div className=\"calculator__screen-container\">\n            <input id=\"display\"\n              type=\"text\"\n              className=\"calculator__screen\"\n              value={calc}\n            ></input>\n          </div>\n          {/* this is really stupid and redundant but I decided to use grids for the styling and still noob/lazy for the moment to use map  */}\n          <div className=\"button_container\">\n            <button onClick={this.handleClick} className=\"reset\" id=\"clear\">\n              AC\n            </button>\n            <button onClick={this.handleClick} className=\"ce\">\n              CE\n            </button>\n            <button onClick={this.handleClick} className=\"operation\" id=\"divide\">\n              /\n            </button>\n            <button onClick={this.handleClick} className=\"multi\" id=\"multiply\">\n              *\n            </button>\n            <button onClick={this.handleClick} className=\"sept\" id=\"seven\">\n              7\n            </button>\n            <button onClick={this.handleClick} className=\"huit\" id=\"eight\">\n              8\n            </button>\n            <button onClick={this.handleClick} className=\"neuf\" id=\"nine\">\n              9\n            </button>\n            <button onClick={this.handleClick} className=\"minus\" id=\"subtract\">\n              -\n            </button>\n            <button onClick={this.handleClick} className=\"quatre\" id=\"four\">\n              4\n            </button>\n            <button onClick={this.handleClick} className=\"cinq\" id=\"five\">\n              5\n            </button>\n            <button onClick={this.handleClick} className=\"six\" id=\"six\">\n              6\n            </button>\n            <button onClick={this.handleClick} className=\"plus\" id=\"add\">\n              +\n            </button>\n            <button onClick={this.handleClick} className=\"un\" id=\"one\">\n              1\n            </button>\n            <button onClick={this.handleClick} className=\"deux\" id=\"two\">\n              2\n            </button>\n            <button onClick={this.handleClick} className=\"trois\" id=\"three\">\n              3\n            </button>\n            <button onClick={this.handleClick} className=\"zero\" id=\"zero\">\n              0\n            </button>\n            <button onClick={this.handleClick} className=\"point\" id=\"decimal\">\n              .\n            </button>\n            <button onClick={this.handleClick} className=\"equal\" id=\"equals\">\n              =\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n    {\n      /* <div className=\"button_container\">\n      \n\n <button className=\"ac-ce\" value=\"ac\" data-type=\"reset\">AC</button>\n <button className=\"ac-ce\" value=\"ce\" data-type=\"reset\">CE</button>\n  <button>÷</button>\n  <button>x</button>\n  <button>7</button>\n  <button>8</button>\n  <button>9</button>\n  <button>-</button>\n  <button>4</button>\n  <button>5</button> \n  <button>6</button>\n  <button>+</button>\n  \n  <div className=\"grid-container\">\n  <button className=\"un\">1</button>\n  <button className=\"deux\">2</button>\n  <button className=\"trois\">3</button>\n\n  <button className=\"zero\">0</button>\n  <button classNam=\"point\">.</button>\n  <button className=\"equal\">=</button>\n  </div>\n  </div> */\n    }\n  }\n}\n\nexport default App;\n"],"sourceRoot":""}